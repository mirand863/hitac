#!/usr/bin/env python3
"""Script to fit hierarchical classifier."""
import argparse
import sys
from argparse import Namespace
from multiprocessing import cpu_count

from hitac._utils import compute_possible_kmers


def parse_args(args: list) -> Namespace:
    """
    Parse a list of arguments.

    Parameters
    ----------
    args : list
        Arguments to parse.

    Returns
    -------
    _ : Namespace
        Parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description="Fit hierarchical classifier",
    )
    parser.add_argument(
        "--reference",
        type=str,
        required=True,
        help="Input FASTA file with reference sequence(s) to train model",
    )
    parser.add_argument(
        "--kmer",
        type=int,
        required=False,
        default=6,
        help="K-mer size for feature extraction [default: 6]",
    )
    parser.add_argument(
        "--cpus",
        type=int,
        required=False,
        default=cpu_count(),
        help="Number of cpus to train in parallel [default: all]",
    )
    parser.add_argument(
        "--classifier",
        type=str,
        required=True,
        help="Path to store trained hierarchical classifier",
    )
    return parser.parse_args(args)


def fit():  # pragma: no cover
    args = parse_args(sys.argv[1:])
    kmers = compute_possible_kmers(args.kmer)
    sequences, taxonomy = load_reference(args.reference)
    # _, training_sequences = _extract_reads(reference_reads)
    # X_train = compute_frequencies(training_sequences, kmers, threads)
    # Y_train = extract_qiime2_taxonomy(reference_taxonomy)
    # logistic_regression = LogisticRegression(
    #     solver="liblinear",
    #     multi_class="auto",
    #     class_weight="balanced",
    #     max_iter=10000,
    #     verbose=0,
    #     n_jobs=1,
    # )
    # hierarchical_classifier = LocalClassifierPerParentNode(
    #     local_classifier=logistic_regression, n_jobs=threads
    # )
    # hierarchical_classifier.fit(X_train, Y_train)
    # return hierarchical_classifier


if __name__ == "__main__":  # pragma: no cover
    fit()
